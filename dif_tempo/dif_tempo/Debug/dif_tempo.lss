
dif_tempo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000015c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000692  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  00000856  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023f  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000353  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00001443  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_14>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

  int main(void)
  {
	  
	//wdt_disable();
	cli(); 
  80:	f8 94       	cli
	////////////////////////////////////////////////////////////////////////
	CLKPR = (1 << CLKPCE);
  82:	e1 e6       	ldi	r30, 0x61	; 97
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 e8       	ldi	r24, 0x80	; 128
  88:	80 83       	st	Z, r24
	CLKPR = 0;
  8a:	10 82       	st	Z, r1
	
	// 40kHz gerador // 
		
  	DDRD = 0b11000001;  //configura pino PD0,PD6,PD7 como saída e demais como entradas
  8c:	81 ec       	ldi	r24, 0xC1	; 193
  8e:	8a b9       	out	0x0a, r24	; 10

  	TCCR0A = 0;
  90:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
  92:	15 bc       	out	0x25, r1	; 37
	
  	TCCR0A = (0<<WGM00)|(1<<WGM01) |(0<<COM0A0)|(0<<COM0A1)|(0<<COM0B0)|(0<<COM0B1)  ; 
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	84 bd       	out	0x24, r24	; 36
  	
	TCCR0B = (0<<FOC0A)|(0<<FOC0B) |(0<<WGM02)| (0<<CS02)|(0<<CS01)|(1<<CS00)  ;
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	95 bd       	out	0x25, r25	; 37
	
	TCNT0 = 0;  
  9c:	16 bc       	out	0x26, r1	; 38
	OCR0A = 100;
  9e:	94 e6       	ldi	r25, 0x64	; 100
  a0:	97 bd       	out	0x27, r25	; 39
	
	TIMSK0 = (1 << OCIE0A);
  a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>

	///////////////////////////////////////////////////////////////////////
	
	// external interupt //
	//                INT1                  INT0
	EICRA = (0<<ISC11)|(0<<ISC10)|(0<<ISC01)|(0<<ISC00); //The rising edge generates an interrupt request.
  a6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
	EIMSK = (0<<INT1)|(0<<INT0); // on int1, on int0
  aa:	1d ba       	out	0x1d, r1	; 29
	

	
	///////////////////////////////////////////////////////////////////////
	
	 sei();
  ac:	78 94       	sei
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x2e>

000000b0 <__vector_14>:
			//}
			}
	 }
  
	ISR(TIMER0_COMPA_vect)
	{
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
		PORTD ^= (1 << PORTD6);
  be:	9b b1       	in	r25, 0x0b	; 11
  c0:	80 e4       	ldi	r24, 0x40	; 64
  c2:	89 27       	eor	r24, r25
  c4:	8b b9       	out	0x0b, r24	; 11
		//cli();
		
	}
  c6:	9f 91       	pop	r25
  c8:	8f 91       	pop	r24
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <_exit>:
  d4:	f8 94       	cli

000000d6 <__stop_program>:
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <__stop_program>
